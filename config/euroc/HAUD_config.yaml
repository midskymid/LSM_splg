%YAML:1.0

#common parameters
imu_topic: "/zed2/zed_node/imu/data"
image_topic: "/zed2/zed_node/left_raw/image_raw_color"
output_path: "/home/midsky/MiSVINS/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width:  672 
image_height: 376    
distortion_parameters:
   k1: 0.2420  # -0.06125568297136998
   k2: 0.2928  # -0.003796743395135256
   p1: 0.0065  # 0.027326634771204592
   p2: -0.00063  # -0.030296403142887066
projection_parameters:
   fx: 356.9395  # 413.32595366566017
   fy: 356.9283  # 413.70198739483686
   cx: 336.8249  # 305.9507483284928
   cy: 197.6402  # 259.4439948946375

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [1.0774367281234598e-02, 1.3722450259400609e-02, 9.9984779210066166e-01,
           -9.9988318376806129e-01, 1.0988668661093715e-02, 1.0623934247843136e-02, 
           -1.0841209689645359e-02, -9.9984545981863393e-01, 1.3839243206554386e-02]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [2.2191769991406866e-03, 1.5661063006466382e-02, -6.6675934139888496e-03]

#feature traker paprameters
max_cnt: 256            # max feature number in feature tracking
min_dist: 5            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel) 10.0

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.00082964          # accelerometer measurement noise standard deviation. #0.2   0.04  0.02
gyr_n: 0.00006831         # gyroscope measurement noise standard deviation.     #0.05  0.004  0.001
acc_w: 0.00005379         # accelerometer bias random work noise standard deviation.  #0.02  0.001  0.00005
gyr_w: 0.00000005      # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/midsky/MiSVINS/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock) -0.0403806549886

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
